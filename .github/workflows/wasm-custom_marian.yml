name: WASM Custom Marian

on:
  push:
    branches: [ main, ci-sandbox ]
  pull_request:
    branches: [ main, ci-sandbox ]

jobs:
  build-wasm:
    strategy: 
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-10.15]
        ccache: [false, true]


    name: ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    steps:
      - name: Setup Emscripten toolchain
        uses: mymindstorm/setup-emsdk@v8


      - name: Install dependencies
        run: |
          sudo apt-get update 
          sudo apt-get install -y ccache
        if: matrix.os == 'ubuntu-latest'

      - name: Install dependencies
        run: |
            brew update && brew install ccache
        if: matrix.os == 'macos-10.15'

      - name: Verify Emscripten setup
        run: emcc -v

      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Generate ccache_vars
        if: ${{ matrix.ccache == true }}
        id: ccache_vars
        shell: bash
        run: |
            echo "::set-output name=timestamp::$(date '+%Y-%m-%dT%H.%M.%S')"

      - name: Setup ccache environment variables
        if: ${{ matrix.ccache == true }}
        run: | 
          echo "EM_COMPILER_WRAPPER=ccache" >> $GITHUB_ENV
          echo "CCACHE_COMPILERCHECK=content" >> $GITHUB_ENV 
          echo "CCACHE_BASE_DIR=${{ github.workspace }}" >> $GITHUB_ENV
          echo "CCACHE_DIR=${{ github.workspace }}/.ccache" >> $GITHUB_ENV
          echo "CCACHE_COMPRESS=true" >> $GITHUB_ENV
          echo "CCACHE_COMPRESSLEVEL=6" >> $GITHUB_ENV
          echo "CCACHE_MAXSIZE=2G" >> $GITHUB_ENV


      - name: Cache-op for build-cache through ccache 
        if: ${{ matrix.ccache == true }}
        uses: actions/cache@v2
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ccache-${{ matrix.os }}-${{ github.ref }}-${{ steps.ccache_vars.outputs.timestamp }}
          restore-keys: |
             ccache-${{ matrix.os }}-${{ github.ref }}- 
             ccache-${{ matrix.os }}-

      - name: Cache stats before build
        if: ${{ matrix.ccache == true }}
        run: |
            ccache -s
            ccache -z

      - name: Configure builds
        run: |
          mkdir -p build-wasm
          cd build-wasm
          emcmake cmake .. -DCOMPILE_WASM=on ${{ matrix.cmake_additional_args }}

      - name: Compile
        working-directory: build-wasm
        run: emmake make -j2

      - name: Cache stats after build
        if: ${{ matrix.ccache == true }}
        run: |
            ccache -s

      - name: Instantiate simd wormhole
        working-directory: build-wasm
        run: bash ../wasm/patch-artifacts-enable-wormhole.sh

      - name: Check artifacts
        working-directory: build-wasm
        run: |
          ls -all bergamot*
          if ls bergamot*.wasm &>/dev/null && ls bergamot*.js &>/dev/null
          then
            echo "Artifacts Successfully Generated"
          else
            echo "Failure: Artifacts Not Present"
            exit 1
          fi
